import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
import { DataService } from '@app/_services/data.service';
import { UserService } from '@app/_services/user.service';
import { FileSaverService } from '@app/_services/file-saver.service';
import { MessageService } from '../_services/message.service';
import {FileUploader} from "ng2-file-upload";
import { HttpHeaders } from '@angular/common/http';
import { CollectionNode } from '../_models/collections';
import { Observable, of } from 'rxjs';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-sidebar',
  templateUrl: './sidebar.component.html',
  styleUrls: ['./sidebar.component.less'],
  host: {'class': 'padded-col fill-col', 'id': 'sidebar'}
})
export class SidebarComponent implements OnInit {
  private enable_download = false;

  public skeleton_list: any;
  public action_list: CollectionNode[] = [];

  public motion_list: any;
  public model_list: any;
  public graph_list: any;

  private collectionOpen = false;

  private activeTab: string = "tab1";
  private activeModal: string = "none";

  private currentAction: string;
  private currentSkeleton: string;
  private currentMotionPrimitive: string;

  private currentActionName: string;
  private currentMotionPrimitiveName: string;

  private queuedClip: any;
    setQueuedClip(newClip: any){
      this.queuedClip = newClip;
    }

  error = '';

  actionSubmitted = false;
  motionSubmitted = false;
  primitiveSubmitted = false;

  newActionForm: FormGroup;
  motionUploadForm: FormGroup;
  primitiveUploadForm: FormGroup;

  public uploader:FileUploader = new FileUploader({
    isHTML5: true
  });

  constructor(private dataService: DataService,
              private msgService: MessageService,
              private fileService: FileSaverService,
              private formBuilder: FormBuilder,
              private user: UserService) {}

  ngOnInit() {
    this.getDownloadSettings();
    this.getSkeletonModels();
    this.getCollectionList();
    this.getModelList();
    this.getGraphList();
    this.initForms();
  }

  initForms(){
    this.newActionForm = this.formBuilder.group({
        newActionName: ['', Validators.required]
    });

    this.motionUploadForm = this.formBuilder.group({
        motionFiles: ['', Validators.required],
        skeletonTarget: ['', Validators.required]
    });

    this.primitiveUploadForm = this.formBuilder.group({
        primitiveFiles: ['', Validators.required]
    });
  }

  getDownloadSettings(){
    this.dataService.getMetaInformation().subscribe(
      metaData => this.enable_download = metaData['enable_download']
    );
  }

  getCollectionList(){
    this.dataService.getCollections().subscribe(
      actions => this.action_list = actions
    );
  }

  getSkeletonModels(){
    this.dataService.getSkeletonModels().subscribe(
        skeletons => this.skeleton_list = skeletons
      );
  }

  getMotionList(){
    this.dataService.getMotionList(this.currentSkeleton, this.currentMotionPrimitive).subscribe(
        motionList => this.motion_list = motionList
      );
  }

  getModelList(){
    this.dataService.getModelList(this.currentSkeleton, this.currentMotionPrimitive).subscribe(
        modelList => this.model_list = modelList
      );
  }

  getGraphList(){
    this.dataService.getGraphList(this.currentSkeleton).subscribe(
        graphList => this.graph_list = graphList
      );
  }

  callModal(modalName: string){
      console.log("Called modal: " + modalName);
      this.activeModal = modalName;
  }

  selectSkeleton(event){
    console.log("Selected Skeleton: " + event);
    this.getMotionList();
    this.getModelList();
    this.getGraphList();
  }

  selectAction(id, name){
    if(this.parentIsOpen(id))
      this.collectionOpen = false;
    else
      this.collectionOpen = true;

    this.currentAction = id;
    this.currentActionName = name;
    console.log("Selected Action: " + id);
  }

  selectMotionPrimitive(id, name){
    this.currentMotionPrimitive = id;
    this.currentMotionPrimitiveName = name;
    console.log("Selected Motion Primitive: " + id);
    this.getMotionList();
    this.getModelList();
  }

  resetSelection(){
    this.currentMotionPrimitive = null;
    this.currentAction = null;
    this.currentActionName = null;
    this.currentMotionPrimitiveName = null;
    this.motion_list = [];
    this.model_list = [];
    this.graph_list = [];
  }

  parentIsOpen(id){
    return this.currentAction == id && this.collectionOpen;
  }

  motionsFound(){
    return this.motion_list && this.motion_list.length > 0;
  }

  openActionForm(){
    this.callModal("newAction");
  }

  removeAction(){
    console.log("Click event fired: remove action");
    this.callModal("removeAction");
  }

  deleteClip(name: string, id: number){
    this.queuedClip = {id: id, name: name};
    this.callModal("deleteClip");
  }

  downloadClip(){
    //TODO: Fill
  }

  downloadSample(){
    //TODO: Fill
  }

  saveToFile(responseText: string, motionName: string){
    // TODO: Fill
    // create new Blob and call file service
  }

  createAction(modal: any){
    this.actionSubmitted = true;

    // stop here if form is invalid
    if (this.newActionForm.invalid) {
        return;
    }
    modal.closeModal();
    this.dataService.createAction(this.newActionForm.controls.skeletonTarget.value,
                                  this.newActionForm.controls.newActionName.value).subscribe(
        data => { },
        error => {
            this.error = error;
            console.log("ERROR: " + error);
        });
  }

  uploadMotionClip(modal: any){
    this.motionSubmitted = true;

    // stop here if form is invalid
    if (this.motionUploadForm.invalid) {
        return;
    }
	console.log("load motion");
	/*console.log( this.motionUploadForm.controls.motionFiles);
	console.log( this.motionUploadForm.controls.motionFiles.value);
  console.log(this.motionUploadForm.controls.skeletonTarget.value);
  
  let f = this.motionUploadForm.controls.motionFiles.value;
  console.log(f);
  this.motionUploadForm.controls.motionFiles.next();*/
 
  for (let i = 0; i < this.uploader.queue.length; i++) {
    let fileItem = this.uploader.queue[i]._file;
    if(fileItem.size > 10000000){
      alert("Each File should be less than 10 MB of size.");
      return;
    }
  }


    modal.closeModal();
  }

  uploadMotionPrimitive(modal: any){
    this.primitiveSubmitted = true;

    // stop here if form is invalid
    if (this.primitiveUploadForm.invalid) {
        return;
    }
    modal.closeModal();
    //TODO: uploadFiles
  }

  showStateGraphScene(id: number){
    // TODO: handle state graph
    return;
  }

  messageUnityInstance(gameObject: string, functionName: string, paramValue: any){
    this.msgService.sendMessage(gameObject, functionName, String(paramValue));
  }

  callMotionClips(){
    this.activeTab ='tab1';
    this.messageUnityInstance("WebGLHub", "LoadNewScene" ,"rest_interface_client");
  }

  callMotionModel(){
    this.activeTab ='tab2';
    this.messageUnityInstance("WebGLHub", "LoadNewScene" ,"rest_interface_client");
  }

  callMotionState(){
    this.activeTab ='tab3';
    this.messageUnityInstance("WebGLHub", "LoadNewScene" ,"test");
  }
}
